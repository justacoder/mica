
/*
 ***************************************************************************
 *                  Mica - the Java(tm) Graphics Framework                 *
 ***************************************************************************
 * NOTICE: Permission to use, copy, and modify this software and its       *
 * documentation is hereby granted provided that this notice appears in    *
 * all copies.                                                             *
 *                                                                         *
 * Permission to distribute un-modified copies of this software and its    *
 * documentation is hereby granted provided that no fee is charged and     *
 * that this notice appears in all copies.                                 *
 *                                                                         *
 * SOFTWARE FARM MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE          *
 * SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT  *
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR  *
 * A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SOFTWARE FARM SHALL NOT BE   *
 * LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR       *
 * CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE, MODIFICATION OR           *
 * DISTRIBUTION OF THIS SOFTWARE OR ITS DERIVATIVES.                       *
 *                                                                         *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND      *
 * DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,        *
 * UPDATES, ENHANCEMENTS, OR MODIFICATIONS.                                *
 *                                                                         *
 ***************************************************************************
 *   Copyright (c) 1997-2004 Software Farm, Inc.  All Rights Reserved.     *
 ***************************************************************************
 */

package com.swfm.mica;
import java.io.*; 

/**----------------------------------------------------------------------------------------------
 * This interface manages the saving an loading of MiiModelEntitys and
 * converting them to/from graphics objects.
 * <p>
 * @version     %I% %G%
 * @author      Michael L. Davis
 * @release 	1.4.1
 * @module 	%M%
 * @language	Java (JDK 1.4)
 *----------------------------------------------------------------------------------------------*/
public interface MiiController
	{
					/**------------------------------------------------------
	 				 * Copies this controller. 
					 * @return 	the copy
					 *------------------------------------------------------*/
	MiiController			copy();

					/**------------------------------------------------------
	 				 * Sets the document this is managing and hands off the doc
					 * to the ViewManager, if any, which populates the view it
					 * manages with a graphics representation of the doc.
					 * @param doc		the open document
					 *------------------------------------------------------*/
	void				setOpenDocument(MiiModelEntity doc);


					/**------------------------------------------------------
	 				 * Gets the document this is managing.
					 * @return		the open document
					 *------------------------------------------------------*/
	MiiModelEntity	 		getOpenDocument();


					/**------------------------------------------------------
	 				 * Closes the document this is managing.
					 * @return		the open document
					 *------------------------------------------------------*/
	void				closeOpenDocument();

					/**------------------------------------------------------
	 				 * Sets the IO manager.
					 * @param manager	the IO manager
					 *------------------------------------------------------*/
	void				setIOFormatManager(MiiModelIOFormatManager manager);


					/**------------------------------------------------------
	 				 * Gets the IO manager.
					 * @return 		the IO manager
					 *------------------------------------------------------*/
	MiiModelIOFormatManager		getIOFormatManager();


					/**------------------------------------------------------
	 				 * Sets the view manager.
					 * @param manager	the view manager
					 *------------------------------------------------------*/
	void				setViewManager(MiiViewManager manager);


					/**------------------------------------------------------
	 				 * Gets the view manager.
					 * @return		the view manager
					 *------------------------------------------------------*/
	MiiViewManager 			getViewManager();


	void				setIOManager(MiiModelIOManager manager);

	MiiModelIOManager 		getIOManager();

	void				setView(MiPart view);

	MiPart				getView();

					/**------------------------------------------------------
	 				 * Loads the view with graphics generated by the viewManager
					 * from the model generated by the ioFormatManager from
					 * the data loaded by the ioManager.
					 *------------------------------------------------------*/
	void				load() throws Exception;

					/**------------------------------------------------------
	 				 * Saves the view of graphics converted by the viewManager
					 * to the model to be saved by the ioFormatManager to
					 * the data stream managed by the ioManager.
					 *------------------------------------------------------*/
	void				save() throws Exception;

					/**------------------------------------------------------
	 				 * Saves the contents of the previously assigned view.
					 * @param outputIOFormatManager format to save the contents in
					 * @param outputIOManager 	the stream
					 *------------------------------------------------------*/
	void				saveAs( MiiModelIOFormatManager outputIOFormatManager,
						MiiModelIOManager outputIOManager) throws Exception;

}

