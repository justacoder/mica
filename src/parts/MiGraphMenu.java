
/*
 ***************************************************************************
 *                  Mica - the Java(tm) Graphics Framework                 *
 ***************************************************************************
 * NOTICE: Permission to use, copy, and modify this software and its       *
 * documentation is hereby granted provided that this notice appears in    *
 * all copies.                                                             *
 *                                                                         *
 * Permission to distribute un-modified copies of this software and its    *
 * documentation is hereby granted provided that no fee is charged and     *
 * that this notice appears in all copies.                                 *
 *                                                                         *
 * SOFTWARE FARM MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE          *
 * SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT  *
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR  *
 * A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SOFTWARE FARM SHALL NOT BE   *
 * LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR       *
 * CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE, MODIFICATION OR           *
 * DISTRIBUTION OF THIS SOFTWARE OR ITS DERIVATIVES.                       *
 *                                                                         *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND      *
 * DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,        *
 * UPDATES, ENHANCEMENTS, OR MODIFICATIONS.                                *
 *                                                                         *
 ***************************************************************************
 *   Copyright (c) 1997-2004 Software Farm, Inc.  All Rights Reserved.     *
 ***************************************************************************
 */


package com.swfm.mica;

/**----------------------------------------------------------------------------------------------
 * This class makes a 'graph' menu that is suitable for adding to a
 * MiEditorMenuBar. Each menu item has status bar and balloon help and
 * most have accelerators and mnemonics.
 * <p>
 * When a menu item is selected by the user one of the following commands
 * are generated:
 * <p>
 * <pre>
 *    Mi_ARRANGE_TREE_COMMAND_NAME
 *    Mi_ARRANGE_NETWORK_COMMAND_NAME
 *    Mi_ARRANGE_OUTLINE_COMMAND_NAME
 *    Mi_ARRANGE_STAR_COMMAND_NAME
 *    Mi_ARRANGE_RING_COMMAND_NAME
 *    Mi_ARRANGE_CROSSBAR_COMMAND_NAME
 *    Mi_ARRANGE_LINE_COMMAND_NAME
 *    Mi_ARRANGE_OMEGA_COMMAND_NAME
 *    Mi_ARRANGE_2DMESH_COMMAND_NAME
 *    
 *    Mi_BUILD_TREE_COMMAND_NAME
 *    Mi_BUILD_NETWORK_COMMAND_NAME
 *    Mi_BUILD_OUTLINE_COMMAND_NAME
 *    Mi_BUILD_STAR_COMMAND_NAME
 *    Mi_BUILD_RING_COMMAND_NAME
 *    Mi_BUILD_CROSSBAR_COMMAND_NAME
 *    Mi_BUILD_LINE_COMMAND_NAME
 *    Mi_BUILD_OMEGA_COMMAND_NAME
 *    Mi_BUILD_2DMESH_COMMAND_NAME
 *    
 *    Mi_FORMAT_TREE_COMMAND_NAME
 *    Mi_FORMAT_NETWORK_COMMAND_NAME
 *    Mi_FORMAT_OUTLINE_COMMAND_NAME
 *    Mi_FORMAT_STAR_COMMAND_NAME
 *    Mi_FORMAT_RING_COMMAND_NAME
 *    Mi_FORMAT_CROSSBAR_COMMAND_NAME
 *    Mi_FORMAT_LINE_COMMAND_NAME
 *    Mi_FORMAT_OMEGA_COMMAND_NAME
 *    Mi_FORMAT_2DMESH_COMMAND_NAME
 *
 *    Mi_REMOVE_FORMAT_COMMAND_NAME
 * </pre>
 * @see     	MiGraphMenu
 * @see     	MiLayoutMenu
 * @version     %I% %G%
 * @author      Michael L. Davis
 * @release 	1.4.1
 * @module 	%M%
 * @language	Java (JDK 1.4)
 *----------------------------------------------------------------------------------------------*/
public class MiGraphMenu extends MiEditorMenu implements MiiCommandNames, MiiMessages, MiiPartsDefines
	{
					/**------------------------------------------------------
	 				 * Constructs a new MiGraphMenu, forwarding commands generated
					 * by this menu to an instance of MiGraphMenuCommands.
					 * @see			MiGraphMenuCommands
					 *------------------------------------------------------*/
	public				MiGraphMenu(MiiCommandManager manager)
		{
		this(new MiGraphMenuCommands(manager), manager);
		}
					/**------------------------------------------------------
	 				 * Constructs a new MiGraphMenu which will send commands
					 * generated by the menu to the given command handler.
					 * @param handler	the command handler
					 * @see 		MiGraphMenuCommands
					 *------------------------------------------------------*/
	public				MiGraphMenu(MiiCommandHandler handler, MiiCommandManager manager)
		{
		super(Mi_GRAPH_MENU_DISPLAY_NAME, manager);

		setCommandHandler(handler);

		MiEditorMenu arrange = new MiEditorMenu("Arrange", manager);
		getMenuContents().appendItem(new MiMenuItem(arrange.getMenu(), "Arrange"));
		arrange.appendMenuItem(	"Arrange Tree", 	handler, 
								Mi_ARRANGE_TREE_COMMAND_NAME);
		arrange.appendMenuItem(	"Arrange Network",	handler, 
								Mi_ARRANGE_NETWORK_COMMAND_NAME);
		arrange.appendMenuItem(	"Arrange Outline",	handler, 
								Mi_ARRANGE_OUTLINE_COMMAND_NAME);
		arrange.appendMenuItem(	"Arrange Star",		handler, 
								Mi_ARRANGE_STAR_COMMAND_NAME);
		arrange.appendMenuItem(	"Arrange Ring",		handler, 
								Mi_ARRANGE_RING_COMMAND_NAME);
		arrange.appendMenuItem(	"Arrange Crossbar",	handler, 
								Mi_ARRANGE_CROSSBAR_COMMAND_NAME);
		arrange.appendMenuItem(	"Arrange Line",		handler, 
								Mi_ARRANGE_LINE_COMMAND_NAME);
		arrange.appendMenuItem(	"Arrange Omega",	handler, 
								Mi_ARRANGE_OMEGA_COMMAND_NAME);
		arrange.appendMenuItem(	"Arrange 2DMesh",	handler, 
								Mi_ARRANGE_2DMESH_COMMAND_NAME);

		MiEditorMenu build = new MiEditorMenu("Build", manager);
		getMenuContents().appendItem(new MiMenuItem(build.getMenu(), "Build"));
		build.appendMenuItem(	"Build Tree", 		handler, 
								Mi_BUILD_TREE_COMMAND_NAME);
		build.appendMenuItem(	"Build Network",	handler, 
								Mi_BUILD_NETWORK_COMMAND_NAME);
		build.appendMenuItem(	"Build Outline",	handler, 
								Mi_BUILD_OUTLINE_COMMAND_NAME);
		build.appendMenuItem(	"Build Star",		handler, 
								Mi_BUILD_STAR_COMMAND_NAME);
		build.appendMenuItem(	"Build Ring",		handler, 
								Mi_BUILD_RING_COMMAND_NAME);
		build.appendMenuItem(	"Build Crossbar",	handler, 
								Mi_BUILD_CROSSBAR_COMMAND_NAME);
		build.appendMenuItem(	"Build Line",		handler, 
								Mi_BUILD_LINE_COMMAND_NAME);
		build.appendMenuItem(	"Build Omega",		handler, 
								Mi_BUILD_OMEGA_COMMAND_NAME);
		build.appendMenuItem(	"Build 2DMesh",		handler, 
								Mi_BUILD_2DMESH_COMMAND_NAME);

		MiEditorMenu format = new MiEditorMenu("Format", manager);
		getMenuContents().appendItem(new MiMenuItem(format.getMenu(), "Format"));
		format.appendMenuItem(	"Format Tree", 		handler, 
								Mi_FORMAT_TREE_COMMAND_NAME);
		format.appendMenuItem(	"Format Network",	handler, 
								Mi_FORMAT_NETWORK_COMMAND_NAME);
		format.appendMenuItem(	"Format Outline",	handler, 
								Mi_FORMAT_OUTLINE_COMMAND_NAME);
		format.appendMenuItem(	"Format Star",		handler, 
								Mi_FORMAT_STAR_COMMAND_NAME);
		format.appendMenuItem(	"Format Ring",		handler, 
								Mi_FORMAT_RING_COMMAND_NAME);
		format.appendMenuItem(	"Format Crossbar",	handler, 
								Mi_FORMAT_CROSSBAR_COMMAND_NAME);
		format.appendMenuItem(	"Format Line",		handler, 
								Mi_FORMAT_LINE_COMMAND_NAME);
		format.appendMenuItem(	"Format Omega",		handler, 
								Mi_FORMAT_OMEGA_COMMAND_NAME);
		format.appendMenuItem(	"Format 2DMesh",	handler, 
								Mi_FORMAT_2DMESH_COMMAND_NAME);
		appendSeparator();
		appendMenuItem(		"Remove Formatting", 	handler, 
								Mi_REMOVE_FORMAT_COMMAND_NAME);

/*
		setHelpMessages(Mi_BRING_TO_FRONT_COMMAND_NAME,
				Mi_BRING_TO_FRONT_STATUS_HELP_MSG,
				Mi_NO_BRING_TO_FRONT_STATUS_HELP_MSG,
				Mi_BRING_TO_FRONT_BALLOON_HELP_MSG);
*/

		}
	}

